#! ../rtlua/lua
package.loadlib('../rtlua/build/rtlua.so', '*')
local rt = require("rtlua").create_state {}
compiler = require 'dylib-lua'
dylib    = require 'dylib'

-- Generate a dynamic loader for woof_lib
-- (this should be autogenerated)
local woof_lib_loader = [[
#include <dlfcn.h>

void (*Woof) (void);
void (*Bark) (void);

void Woof_Loader(void* Handle) {
    Woof = dlsym(Handle, "Woof");
    Bark = dlsym(Handle, "Bark");
}

]]

local woof_lib_source = [[
#include <stdio.h>

void Woof() {
    printf("Woof!!\n");
}

void Bark() {
    printf("Bark!!\n");
}

]]

local woof_lib_handle = dylib.open(compile_source(woof_lib_source))


local double_woof_source = [[
#include <stdio.h>

int DoubleWoof(int NumberOfWoofs) {
    printf("I'm gonna woof %i times!!\n", NumberOfWoofs);
    Woof();
    Woof();
    Bark();
    return 456;
}

]]

-- Generate a Realtalk interface for DoubleWoof
-- (this should be autogenerated)
local double_woof_interface = [[
#include "lua.h"
#include "realtalk.h"
#include "rtlua.h"

rt_ref DoubleWoof_RT(rt_state* RT, rt_ref Arg) {
    int ArgNum = rt_ref_to_number(RT, Arg);
    int Result = DoubleWoof(ArgNum);
    return rt_ref_from_number(RT, Result);
}

]]

-- DoubleWoof depends on WoofLib, so include its loader/header.
double_woof_source = woof_lib_loader .. double_woof_source .. double_woof_interface

local double_woof_handle = dylib.open(compile_source(double_woof_source))

-- Load the functions from Woof into DoubleWoof's namespace
dylib.call_loader(double_woof_handle, "Woof_Loader", woof_lib_handle)

-- Finally, call a function that uses Realtalk as its FFI.
local result = dylib.call(double_woof_handle, "DoubleWoof_RT", rt.value(123))
print(string.format("Double Woof musta woofed like %i times!", result))
